{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Riley's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li> <p>Primary author: Riley Warmuth</p> </li> <li> <p>Reviewer: Mason Drabik</p> </li> </ul>"},{"location":"tutorials/rust-setup/#introduction","title":"Introduction","text":"<p>In this tutorial, you will learn how to set up a development container for Rust from scratch. You will also create a basic \"Hello COMP423\" Rust program to verify that your environment is properly configured.</p>"},{"location":"tutorials/rust-setup/#_1","title":"Setting up a dev container for Rust","text":""},{"location":"tutorials/rust-setup/#_2","title":"Setting up a dev container for Rust","text":""},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>Install Docker: Download and install Docker Desktop. Get Docker Here.</li> <li>Install VS Code: Download and install VS Code. Get VS Code Here.</li> <li>Install the Remote - Containers Extension: In VS Code, go to the Extensions Marketplace (Ctrl+Shift+X or Cmd+Shift+X on Mac), search for \"Dev Containers,\" and install the official \"Remote - Containers\" extension.</li> </ol>"},{"location":"tutorials/rust-setup/#_3","title":"Setting up a dev container for Rust","text":""},{"location":"tutorials/rust-setup/#_4","title":"Setting up a dev container for Rust","text":""},{"location":"tutorials/rust-setup/#part-1-setting-up-your-environment","title":"Part 1: Setting up Your Environment","text":""},{"location":"tutorials/rust-setup/#_5","title":"Setting up a dev container for Rust","text":"<p>1. Create a folder for your project: Open a new terminal and run the following commands:</p> <pre><code>mkdir rust-dev-container\ncd rust-dev-container\n</code></pre> <p>This will create and navigate to your project folder.</p> <p>2. Initialize a Git repository</p> <p>Initialize a new repository by running: <code>git init</code></p> <p>Create a README.md file and commit it:</p> <pre><code>echo \"# Rust Dev Container\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre> <p>Link your repository to a remote on GitHub:</p> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/&lt;your-repository-name&gt;.git\n</code></pre> <p>Push your changes to GitHub:</p> <pre><code>git branch -M main\ngit push --set-upstream origin main\n</code></pre> <p>Verify your changes on GitHub.</p> <p>3. Create a folder for your devcontainer</p> <p>Open your project in VS Code (Ctrl+O or Cmd+O on Mac).</p> <p>Create a .devcontainer folder:</p> <pre><code>mkdir .devcontainer\n</code></pre> <p>4. Create a devcontainer.json file Create the devcontainer.json file:</p> <pre><code>touch .devcontainer/devcontainer.json\n</code></pre> <p>Add the following configuration:</p> <pre><code>{\n  \"name\": \"Rust Dev Container\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:1\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"rust-lang.rust-analyzer\"\n      ]\n    }\n  },\n  \"postCreateCommand\": \"cargo install --list\",\n  \"remoteUser\": \"vscode\"\n}\n</code></pre> <p>5. Open the project in the dev container</p> <p>In VS Code, press Ctrl+Shift+P (or Cmd+Shift+P on Mac) and type \"Dev Containers: Reopen in Container.\"</p> <p>Wait for the container to build and set up the environment.</p> <p>6. Verify the setup</p> <p>Open a terminal in VS Code and check the Rust compiler version:</p> <pre><code>rustc --version\n</code></pre> <p>Example output:</p> <pre><code>rustc 1.70.0 (example-build-date)\n</code></pre>"},{"location":"tutorials/rust-setup/#part-2-running-rust","title":"Part 2: Running Rust","text":"<p>1. Create a new Rust project</p> <p>Use cargo to create a new binary project without initializing a Git repository:</p> <pre><code>cargo new hello-comp423 --vcs none\n</code></pre> <p>Navigate to the project directory:</p> <pre><code>cd hello-comp423\n</code></pre> <p>2. Edit the main file</p> <p>Open src/main.rs and modify it as follows:</p> <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#step-3-build-and-run-the-program","title":"Step 3: Build and run the program","text":"<p>Build the project</p> <p>To build the project, use the following command:</p> <pre><code>cargo build\n</code></pre> <p>This creates an executable file in the target/debug directory. To run it:</p> <pre><code>./target/debug/hello-comp423\n</code></pre> <p>Output:</p> <pre><code>Hello COMP423\n</code></pre> <p>Run the project directly</p> <p>Alternatively, you can use <code>cargo run</code>, which combines building and running the program in one step:</p> <pre><code>cargo run\n</code></pre> <p>Output:</p> <pre><code>Hello COMP423\n</code></pre> <p>Explanation of Commands</p> <p><code>cargo build</code>: Compiles the project into an executable binary for later use. Similar to gcc -o in C programming.</p> <p><code>cargo run</code>: Compiles and immediately runs the program, ideal for quick testing.</p>"},{"location":"tutorials/rust-setup/#_6","title":"Setting up a dev container for Rust","text":""},{"location":"tutorials/rust-setup/#conclusion","title":"Conclusion","text":"<p>Congratulations! You have successfully set up a Rust development container, created a new project, and run a Rust program. You\u2019re now ready to explore more advanced Rust features!</p>"}]}